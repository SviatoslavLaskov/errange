using System.Text.Json.Serialization;

namespace Errange.ViewModels;

public class ErrangeProblemDetails
{
    /// <summary>
    ///     A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
    ///     dereferenced, it provide human-readable documentation for the problem type
    ///     (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be
    ///     "about:blank".
    /// </summary>
    /// <example>https://example.com/errors/customer/nickname/taken</example>
    [JsonPropertyOrder(order: 0)]
    public string? Type { get; set; }

    /// <summary>
    ///     A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence
    ///     of the problem, except for purposes of localization(e.g., using proactive content negotiation;
    ///     see[RFC7231], Section 3.4).
    /// </summary>
    /// <example>Customer with this nickname is already registered.</example>
    [JsonPropertyOrder(order: 1)]
    public string? Title { get; set; }

    /// <summary>
    ///     The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    /// <example>400</example>
    [JsonPropertyOrder(order: 2)]
    public int Status { get; set; }

    /// <summary>
    ///     A human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    /// <example>Nickname 'superuser123' is already used.</example>
    [JsonPropertyOrder(order: 3)]
    public string? Detail { get; set; }

    /// <summary>
    ///     A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information
    ///     if dereferenced.
    /// </summary>
    /// <example>https://example.com/customer/superuser123</example>
    [JsonPropertyOrder(order: 4)]
    public string? Instance { get; set; }

    /// <summary>
    ///     Code, that identified error type, based on exception type. Can be used as key for human-readable message template.
    /// </summary>
    /// <example>CUS001</example>
    [JsonPropertyOrder(order: 5)]
    public string ProblemCode { get; set; } = null!;

    /// <summary>
    ///     Custom data. Is used to populate human-readable message template at UI.
    /// </summary>
    [JsonPropertyOrder(order: 6)]
    public IDictionary<string, ProblemDataItem> Data { get; set; } = new Dictionary<string, ProblemDataItem>();

    [JsonPropertyOrder(order: 7)]
    public string TraceId { get; set; } = null!;

    /// <summary>
    ///     Is available at non-production environments to speed up development.
    /// </summary>
    [JsonPropertyOrder(order: 8)]
    public ExceptionInfo? ExceptionInfo { get; set; }
}